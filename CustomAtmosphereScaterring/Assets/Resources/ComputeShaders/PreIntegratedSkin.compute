// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel PreIntegratedSkin SIZE=256 PI=3.14159265358979323846 STEP = 500

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float Gaussian(float v, float r) {
    v *= 1.414;
    return exp(-(r*r)/(2*v)) / sqrt(2.0*PI*v);
}

float3 DiffusionProfile(float r) {
    float3 result = float3(0,0,0);
    result = Gaussian(0.0064, r) * float3(0.233, 0.455, 0.649) + Gaussian(0.0484, r) * float3(0.100, 0.366, 0.344) + Gaussian(0.187, r) * float3(0.118, 0.198, 0) + Gaussian(0.567, r) * float3(0.113, 0.007, 0.007) + Gaussian(1.99, r) * float3(0.358, 0.004, 0) + Gaussian(7.41, r) * float3(0.078, 0, 0);
    return result;
}

[numthreads(8,8,1)]
void PreIntegratedSkin (uint3 id : SV_DispatchThreadID)
{
    float distance = sqrt((id.x - 128) * (id.x - 128) + (id.y - 128) * (id.y - 128))/70.0;
    // TODO: insert actual code here!

    float3 color = float3(0,0,0);
    float3 m = float3(0, 0, 0);
    float3 d = float3(0, 0, 0);
    float NdotL = id.x / 255.0 - 0.5;
    float r = 255.0 / id.y;
    for ( float i = -PI; i <= PI; i+=2.0*PI/STEP ) {
        float the = acos(NdotL);
        m += saturate(cos(the + i)) * DiffusionProfile(2 * r * sin(i/2.0)) * sin(the) * 2.0*PI/STEP;
        d += DiffusionProfile(2 * r * sin(i/2.0)) * sin(the) * 2.0*PI/STEP;
    }
    color = m / d;
    Result[id.xy] = float4(color, 0);
}
